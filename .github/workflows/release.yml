name: Release to Production (ECR + ECS)

# Developer workflow
#   1. Merge PR
#   2. Tag main branch with vX.Y.Z
#   3. CI builds vX.Y.Z
#   4. Update ECS service vX.Y.Z

# After PR is merged. Run the following to trigger.
#   git checkout main
#   git pull
#   git tag v1.2.3
#   git push origin v1.2.3

# Or create a GitHub Release
#   - https://github.com/National-Tutoring-Observatory/pipeline/releases/new

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  id-token: write
  contents: read
  packages: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nto-pipeline

jobs:
  deploy:
    environment: production
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref_name }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve version from tag
        id: ver
        run: |
          set -euo pipefail
          tag="${GITHUB_REF_NAME}"
          if ! echo "$tag" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Tag must be vMAJOR.MINOR.PATCH (e.g. v1.2.3). Got: $tag"
            exit 1
          fi
          echo "version=${tag#v}" >> "$GITHUB_OUTPUT"

      - name: Preflight - Ensure tag points to main
        run: |
          set -euo pipefail
          tag="${GITHUB_REF_NAME}"
          commit="$(git rev-list -n 1 "$tag")"
          git fetch origin main --depth=1
          if ! git branch --remotes --contains "$commit" | grep -q 'origin/main'; then
            echo "❌ Tag $tag does not point to a commit on main. Aborting."
            exit 1
          fi

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image
        env:
          VERSION: ${{ steps.ver.outputs.version }}
        run: |
          set -euo pipefail
          docker build -t $ECR_REPOSITORY:$VERSION .
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY"
          docker tag $ECR_REPOSITORY:$VERSION $ECR_URI:$VERSION
          docker push $ECR_URI:$VERSION
          echo "ECR_URI=$ECR_URI" >> "$GITHUB_ENV"
          echo "Built and pushed $ECR_URI:$VERSION"

#      - name: Deploy tag by updating ECS task definition
#        env:
#          VERSION: ${{ steps.ver.outputs.version }}
#        run: |
#          set -euo pipefail
#          cluster="${{ vars.ECS_CLUSTER }}"
#          service="${{ vars.ECS_SERVICE }}"
#          container="${{ vars.ECS_CONTAINER_NAME }}"
#
#          if [ -z "$cluster" ] || [ -z "$service" ] || [ -z "$container" ]; then
#            echo "Set repo variables ECS_CLUSTER, ECS_SERVICE, and ECS_CONTAINER_NAME."
#            exit 1
#          fi
#
#          # 1) Current task definition ARN used by the service
#          TD_ARN=$(aws ecs describe-services \
#            --cluster "$cluster" --services "$service" \
#            --query "services[0].taskDefinition" --output text)
#
#          # 2) Fetch full task definition JSON
#          aws ecs describe-task-definition \
#            --task-definition "$TD_ARN" \
#            --query "taskDefinition" > td.json
#
#          # 3) Update the image for the target container to the exact tag
#          NEW_IMAGE="$ECR_URI:$VERSION"
#          jq --arg cname "$container" --arg img "$NEW_IMAGE" '
#            .containerDefinitions |= map(if .name == $cname then .image = $img else . end)
#            | {
#                family, taskRoleArn, executionRoleArn, networkMode,
#                containerDefinitions, volumes, placementConstraints,
#                requiresCompatibilities, cpu, memory, runtimePlatform, ephemeralStorage
#              }
#          ' td.json > td-register.json
#
#          # 4) Register new task definition revision
#          NEW_TD_ARN=$(aws ecs register-task-definition \
#            --cli-input-json file://td-register.json \
#            --query "taskDefinition.taskDefinitionArn" --output text)
#
#          # 5) Update the service to the new revision (triggers rollout)
#          aws ecs update-service \
#            --cluster "$cluster" \
#            --service "$service" \
#            --task-definition "$NEW_TD_ARN"
#
#          echo "✅ Deployed $NEW_IMAGE via $NEW_TD_ARN"
